{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rares Manolescu\\\\Desktop\\\\blockchain-property-app\\\\frontend\\\\src\\\\contractUtils.js\";\nimport { ethers } from \"ethers\";\nimport PropertyNFT from \"./PropertyNFT.json\"; // ABI from Hardhat artifacts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // update after deploy\n\nexport default function Login() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    style: {\n      color: \"black\"\n    },\n    children: \"Hello, Login works!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 12\n  }, this);\n}\n_c = Login;\nexport async function getProvider() {\n  if (window.ethereum) {\n    await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    });\n    return new ethers.providers.Web3Provider(window.ethereum);\n  }\n  throw new Error(\"MetaMask not found\");\n}\nexport async function getSigner() {\n  const provider = await getProvider();\n  return provider.getSigner();\n}\nexport async function getContract() {\n  const signer = await getSigner();\n  return new ethers.Contract(CONTRACT_ADDRESS, PropertyNFT.abi, signer);\n}\nexport async function getMyNFTs(address) {\n  const contract = await getContract();\n  const balance = await contract.balanceOf(address);\n  let nfts = [];\n  for (let i = 0; i < balance; i++) {\n    const tokenId = await contract.tokenOfOwnerByIndex(address, i);\n    const data = await contract.getProperty(tokenId);\n    nfts.push({\n      tokenId: tokenId.toString(),\n      ...parsePropertyData(data)\n    });\n  }\n  return nfts;\n}\nfunction parsePropertyData([itemType, name, value, purchaseDate, vin, addr]) {\n  return {\n    itemType,\n    name,\n    value: value.toString(),\n    purchaseDate,\n    vin,\n    addr\n  };\n}\nexport async function transferNFT(tokenId, to) {\n  const contract = await getContract();\n  const tx = await contract[\"safeTransferFrom(address,address,uint256)\"](await contract.signer.getAddress(), to, tokenId);\n  await tx.wait();\n}\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["ethers","PropertyNFT","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","Login","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","getProvider","window","ethereum","request","method","providers","Web3Provider","Error","getSigner","provider","getContract","signer","Contract","abi","getMyNFTs","address","contract","balance","balanceOf","nfts","i","tokenId","tokenOfOwnerByIndex","data","getProperty","push","toString","parsePropertyData","itemType","name","value","purchaseDate","vin","addr","transferNFT","to","tx","getAddress","wait","$RefreshReg$"],"sources":["C:/Users/Rares Manolescu/Desktop/blockchain-property-app/frontend/src/contractUtils.js"],"sourcesContent":["import { ethers } from \"ethers\";\r\nimport PropertyNFT from \"./PropertyNFT.json\"; // ABI from Hardhat artifacts\r\n\r\nconst CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // update after deploy\r\n\r\n\r\nexport default function Login() {\r\n    return <h1 style={{ color: \"black\" }}>Hello, Login works!</h1>;\r\n}\r\nexport async function getProvider() {\r\n  if (window.ethereum) {\r\n    await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n    return new ethers.providers.Web3Provider(window.ethereum);\r\n  }\r\n  throw new Error(\"MetaMask not found\");\r\n}\r\n\r\nexport async function getSigner() {\r\n  const provider = await getProvider();\r\n  return provider.getSigner();\r\n}\r\n\r\nexport async function getContract() {\r\n  const signer = await getSigner();\r\n  return new ethers.Contract(CONTRACT_ADDRESS, PropertyNFT.abi, signer);\r\n}\r\n\r\nexport async function getMyNFTs(address) {\r\n  const contract = await getContract();\r\n  const balance = await contract.balanceOf(address);\r\n  let nfts = [];\r\n  for (let i = 0; i < balance; i++) {\r\n    const tokenId = await contract.tokenOfOwnerByIndex(address, i);\r\n    const data = await contract.getProperty(tokenId);\r\n    nfts.push({\r\n      tokenId: tokenId.toString(),\r\n      ...parsePropertyData(data)\r\n    });\r\n  }\r\n  return nfts;\r\n}\r\n\r\nfunction parsePropertyData([itemType, name, value, purchaseDate, vin, addr]) {\r\n  return {\r\n    itemType, name, value: value.toString(), purchaseDate, vin, addr\r\n  };\r\n}\r\n\r\nexport async function transferNFT(tokenId, to) {\r\n  const contract = await getContract();\r\n  const tx = await contract[\"safeTransferFrom(address,address,uint256)\"](\r\n    await contract.signer.getAddress(),\r\n    to,\r\n    tokenId\r\n  );\r\n  await tx.wait();\r\n}\r\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,WAAW,MAAM,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,gBAAgB,GAAG,4CAA4C,CAAC,CAAC;;AAGvE,eAAe,SAASC,KAAKA,CAAA,EAAG;EAC5B,oBAAOF,OAAA;IAAIG,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAAC,QAAA,EAAC;EAAmB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AAClE;AAACC,EAAA,GAFuBR,KAAK;AAG7B,OAAO,eAAeS,WAAWA,CAAA,EAAG;EAClC,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACnB,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;MAAEC,MAAM,EAAE;IAAsB,CAAC,CAAC;IAChE,OAAO,IAAIlB,MAAM,CAACmB,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC;EAC3D;EACA,MAAM,IAAIK,KAAK,CAAC,oBAAoB,CAAC;AACvC;AAEA,OAAO,eAAeC,SAASA,CAAA,EAAG;EAChC,MAAMC,QAAQ,GAAG,MAAMT,WAAW,CAAC,CAAC;EACpC,OAAOS,QAAQ,CAACD,SAAS,CAAC,CAAC;AAC7B;AAEA,OAAO,eAAeE,WAAWA,CAAA,EAAG;EAClC,MAAMC,MAAM,GAAG,MAAMH,SAAS,CAAC,CAAC;EAChC,OAAO,IAAItB,MAAM,CAAC0B,QAAQ,CAACtB,gBAAgB,EAAEH,WAAW,CAAC0B,GAAG,EAAEF,MAAM,CAAC;AACvE;AAEA,OAAO,eAAeG,SAASA,CAACC,OAAO,EAAE;EACvC,MAAMC,QAAQ,GAAG,MAAMN,WAAW,CAAC,CAAC;EACpC,MAAMO,OAAO,GAAG,MAAMD,QAAQ,CAACE,SAAS,CAACH,OAAO,CAAC;EACjD,IAAII,IAAI,GAAG,EAAE;EACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,EAAEG,CAAC,EAAE,EAAE;IAChC,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAACM,mBAAmB,CAACP,OAAO,EAAEK,CAAC,CAAC;IAC9D,MAAMG,IAAI,GAAG,MAAMP,QAAQ,CAACQ,WAAW,CAACH,OAAO,CAAC;IAChDF,IAAI,CAACM,IAAI,CAAC;MACRJ,OAAO,EAAEA,OAAO,CAACK,QAAQ,CAAC,CAAC;MAC3B,GAAGC,iBAAiB,CAACJ,IAAI;IAC3B,CAAC,CAAC;EACJ;EACA,OAAOJ,IAAI;AACb;AAEA,SAASQ,iBAAiBA,CAAC,CAACC,QAAQ,EAAEC,IAAI,EAAEC,KAAK,EAAEC,YAAY,EAAEC,GAAG,EAAEC,IAAI,CAAC,EAAE;EAC3E,OAAO;IACLL,QAAQ;IAAEC,IAAI;IAAEC,KAAK,EAAEA,KAAK,CAACJ,QAAQ,CAAC,CAAC;IAAEK,YAAY;IAAEC,GAAG;IAAEC;EAC9D,CAAC;AACH;AAEA,OAAO,eAAeC,WAAWA,CAACb,OAAO,EAAEc,EAAE,EAAE;EAC7C,MAAMnB,QAAQ,GAAG,MAAMN,WAAW,CAAC,CAAC;EACpC,MAAM0B,EAAE,GAAG,MAAMpB,QAAQ,CAAC,2CAA2C,CAAC,CACpE,MAAMA,QAAQ,CAACL,MAAM,CAAC0B,UAAU,CAAC,CAAC,EAClCF,EAAE,EACFd,OACF,CAAC;EACD,MAAMe,EAAE,CAACE,IAAI,CAAC,CAAC;AACjB;AAAC,IAAAvC,EAAA;AAAAwC,YAAA,CAAAxC,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}